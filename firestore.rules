// Firestore Security Rules for TSW Fantasy League
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId
        && isValidUser(resource.data);
    }
    
    // Players collection - read-only for all authenticated users
    match /players/{playerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && hasAdminRole();
    }
    
    // Teams collection - users can only access their own teams
    match /teams/{teamId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         request.resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        isValidTeam(request.resource.data);
    }
    
    // Tickets collection - users can only access their own tickets
    match /tickets/{ticketId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         request.resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Inbox collection - users can only access their own inbox
    match /inbox/{inboxId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         request.resource.data.userId == request.auth.uid);
    }
    
    // Leaderboard collection - read-only for all authenticated users
    match /leaderboard/{entry} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && hasAdminRole();
    }
    
    // Helper functions
    function isValidUser(userData) {
      return userData.keys().hasAll(['username', 'email', 'createdAt']) &&
             userData.username is string &&
             userData.email is string &&
             userData.createdAt is timestamp;
    }
    
    function isValidTeam(teamData) {
      return teamData.keys().hasAll(['name', 'players', 'captain', 'viceCaptain']) &&
             teamData.name is string &&
             teamData.players.keys().hasAll(['gk', 'cdm1', 'cdm2', 'lw', 'rw']) &&
             teamData.captain is string &&
             teamData.viceCaptain is string;
    }
    
    function hasAdminRole() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
